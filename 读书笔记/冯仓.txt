 集合引用类型
==================================
==================================

Object类型
目前为止，大多数引用数据类型都是Object类型的实例，Object类型也是ECMAScript用的最多的一个类型。
创建Object类型有两种方式:
• 通过构造函数创建：let obj=new Object()
• 通过字面量创建：let obj={}，更加推荐使用，初始化时能够带入大量数据
在通过对象字面量定义对象时，实际上不会调用 Object 构造函数

==================================
Array类型
==================================
Array类型是出Object类型之外最常用的数据类型，与其他语言类似的，ECMAScript的Array是有序的，但不同的是，ECMAScript中的Array能够存储任何数据类型，并且其大小可以动态调整。
创建数组的方式：
• 通过Array()构造函数
• 通过[]字面量
与对象一样，在使用数组字面量表示法时，也不会调用Array 构造函数。
Array构造函数有两个ES6新增的数组静态方法：from()、of()
• from()：将类数组结构转换为数组实例
• of()：将数组参数转换为数组实例
通过数组length属性，除了可以读取数组长度之外，还可动态调整数组长度;调整长度时，除了会以空项补充不足位以外，还会将多余项去掉：
let a = [1, 2, 3, 4]
a.length = 5
console.log(a)// [ 1, 2, 3, 4, <1 empty item> ]
a.length = 2
console.log(a)// [ 1, 2 ]
相对其他编程语言ECMAScript对数组越界报错，而是对于越界访问返回undefined
对于越界赋值，则会在该下标位置添加该值，其余项用空项补充。
数组最多可以包含 4 294 967 295个项，这几乎已经能够满足任何编程需求了。如果想添加的项数超过这个上限值，就会发生异常。而创建一个初始大小与这个上限值接近的数组，则可能会导致运行时间超长的脚本错误。
==================================
数组空位
ECMAScript会将逗号之间相应索引位置的值当成空位，ES6规范重新定义了该如何处理这些空位。
与ES5不同的是，空位默认值为undefined而不是忽略这个空位。
注意　由于行为不一致和存在性能隐患，因此实践中要避免使用数组空位。如果确实需要空位，则可以显式地用undefined值代替。
==================================
数组索引
想要获取数组中的值，可以通过使用中括号里面使用数组索引的方式获取某个值，设置某个值也是同样的：
let colors = ["red", "blue", "green"];  // 定义一个字符串数组
alert(colors[0]);                       // 显示第一项
colors[2] = "black";                    // 修改第三项
colors[3] = "brown";                    // 添加第四项
注意　数组最多可以包含4 294 967 295个元素，这对于大多数编程任务应该足够了。如果尝试添加更多项，则会导致抛出错误。以这个最大值作为初始值创建数组，可能导致脚本运行时间过长的错误。
==================================
检测数组
监测数组使用Array.isArray()方法进行检测
let a = [1, 2, 3, 4]
let b = {
  0: 1,
  1: 2,
  2: 3
}
console.log(Array.isArray(a))// true
console.log(Array.isArray(b))// false
==================================
迭代器方法
• keys()：返回数组的索引迭代器
• values()：返回数组元素迭代器
• entries()：返回数组索引和值组合的数组的迭代器
==================================
复制和填充方法
• fill(fillValue?:any,start=0,end:Array.length)：用某个值填充数组的某段元素，默认是整个数组
• copyWithin(target:number,start:number,end?:Array.length-1)：浅复制从包含start开始到不包含end结束的数组元素片段到target位置
==================================
转换方法
valueOf
数组的valueOf()方法会返回数组本身
toString
toString()方法会调用每一项的toString方法，然后通过通过逗号拼接
toLocaleString
数组的toLocalString()方法与toString方法类似，调用数组每一项的toLocaleString方法然后再使用逗号拼接：
let a = [1, 2, 3, 4]
console.log(a.toLocaleString())// 1,2,3,4
join
join()方法能够通过依次调用每一项的toString()方法，用指定的字符串拼接数组：
let a = [1, 2, {
  toLocaleString () {
    return '3 toLocaleString'
  },
  toString () {
    return '3 toString'
  }
}, 4]
console.log(a.join('-'))// 1-2-3 toString-4
如果数组中的某一项的值是 null 或者 undefined，那么该值在 join()、toLocaleString()、toString()和valueOf()方法返回的结果中以空字符串表示。
==================================
栈方法
栈是一种 LIFO（Last-In-First-Out，后进先出）的数据结构，也就是最新添加的项最早被移除。而栈中项的插入（叫做推入）和移除（叫做弹出），只发生在一个位置——栈的顶部。
ECMAScript为数组专门提供了push()和 pop()方法，以便实现类似栈的行为。
push()方法：往数组末尾追加一个值
pop()方法：删除数组末尾项
==================================
队列方法
队列数据结构的访问规则是 FIFO（First-In-First-Out，先进先出）。队列在列表的末端添加项，从列表的前端移除项。
使用push()和shift()方法能够实现这种数据结构,或者使用unshift()和pop()方法实现
shift()方法：删除数组首项
unShift()方法：在数组开始处添加一项或者多项
==================================
重排序方法
reverse()：反转数组
sort()：如果没有指定排序函数，默认调用数组的toString()方法，根据得到的字符串升序排序
sort()方法中指定排序函数返回1或0表示升序，返回-1表示降序
reverse()和 sort()方法的返回值是经过排序之后的数组。
操作方法
contat
contat()：将多个数组连接并创建新数组，对原数组无影响
const arr1 = [1, 2]
const arr2 = [3, 4]
const arr3 = [5, 6]
console.log(arr1.concat(arr2, arr3))// [ 1, 2, 3, 4, 5, 6 ]
console.log(arr1)// [ 1, 2 ]
console.log(arr2)// [ 3, 4 ]
console.log(arr3)// [ 5, 6 ]
slice
slice(start?:number,end?:number)：基于当前数组创建新数组,start为开始位置（包含），end为结束位置（不包含）,不影响原数组
const arr1 = [1, 2, 3, 4, 5, 6]
console.log(arr1.slice(1))// [ 2, 3, 4, 5, 6 ]
console.log(arr1.slice(1, 3))// [ 2, 3 ]
console.log(arr1)// [ 1, 2, 3, 4, 5, 6 ]
如果 slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。例如，在一个包含 5项的数组上调用 slice(-2,-1)与调用 slice(3,4)得到的结果相同。如果结束位置小于起始位置，则返回空数组。
==================================
splice
splice()方法是数组中比较好用的方法之一，其可以实现插入、删除、替换三种功能：
• 删除：提供两个参数，即可以删除任意位置的值，第一个参数为删除位置，第二个参数为删除项目数量
• 插入：提供至少三个参数，即可在任意位置插入多个值，第一个参数为插入的位置，第二个参数为0（表示不需要删除项目），第三个乃至后面的参数表示需要添加的项
• 替换：替换和插入类似，不同的是，第二个参数为需要替换的项目数量，第三个乃至后面的参数表示需要替换的项
const arr1 = [1, 2, 3, 4, 5, 6]
arr1.splice(1, 1)
console.log(arr1)
arr1.splice(3, 0, 7, 8, 9)
console.log(arr1)
arr1.splice(0, 2, -3)
console.log(arr1)
搜索和位置
三个严格相等方法：
• indexof()：从数组起点位置向后查找项，查找成功返回位置，否则返回-1，使用全等操作符比较
• lastIndexOf()：从数组末尾位置向前查找项，查找成功返回位置，否则返回-1，使用全等操作符比较
• includes()：判断数组是否存在某个元素
两个断言方法：
• find()：返回第一个匹配元素
• findIndex：返回第一个满足测试函数项的索引
迭代方法
every()：判断数组中的每一项是否能通过测试函数
filter()：返回数组中通过测试函数的项
foreach()：遍历数组每一项，并执行给定函数
map()：遍历数组每一项，并将返回项组成数组
some()：测试数组中是否有一项通过测试函数
归并方法
reduce()：迭代数组所有项，返回一个最终项
reduceRight()：reduce()方法的反向版本
const arr = [
  {
    val: 20,
    label: 'label'
  },
  {
    val: 21,
    label: 'label'
  },
  {
    val: 120,
    label: 'label'
  },
  {
    val: 220,
    label: 'label'
  },
  {
    val: 201,
    label: 'label'
  }
]
const total = arr.map(item => item.val).reduce((val, current) => val + current)
const total2 = arr.map(item => item.val).reduceRight((val, current) => val + current)
console.log(total)// 582
console.log(total2)// 582
==================================
定型数组
定型数组（typed array）是ECMAScript新增的结构，目的是提升向原生库传输数据的效率。实际上，JavaScript并没有“TypedArray”类型，它所指的其实是一种特殊的包含数值类型的数组。为理解如何使用定型数组，有必要先了解一下它的用途。
历史
随着浏览器的流行，不难想象人们会满怀期待地通过它来运行复杂的3D应用程序。早在2006年，Mozilla、Opera等浏览器提供商就实验性地在浏览器中增加了用于渲染复杂图形应用程序的编程平台，无须安装任何插件。其目标是开发一套JavaScript API，从而充分利用3D图形API和GPU加速，以便在<canvas>元素上渲染复杂的图形。
WebGL
最后的JavaScript API是基于OpenGL ES（OpenGL for Embedded Systems）2.0规范的。OpenGL ES是OpenGL专注于2D和3D计算机图形的子集。这个新API被命名为WebGL（Web Grapics Library），于2011年发布1.0版。有了它，开发者就能够编写涉及复杂图形的应用程序，它会被兼容WebGL的浏览器原生解释执行。
在WebGL的早期版本中，因为JavaScript数组与原生数组之间不匹配，所以出现了性能问题。图形驱动程序API通常不需要以JavaScript默认双精度浮点格式传递给它们的数值，而这恰恰是JavaScript数组在内存中的格式。因此，每次WebGL与JavaScript运行时之间传递数组时，WebGL绑定都需要在目标环境分配新数组，以其当前格式迭代数组，然后将数值转型为新数组中的适当格式，而这些要花费很多时间。
定型数组
这当然是难以接受的，Mozilla为解决这个问题而实现了CanvasFloatArray。这是一个提供JavaScript接口的、C语言风格的浮点值数组。JavaScript运行时使用这个类型可以分配、读取和写入数组。这个数组可以直接传给底层图形驱动程序API，也可以直接从底层获取到。最终，CanvasFloatArray变成了Float32Array，也就是今天定型数组中可用的第一个“类型”。
ArrayBuffer
Float32Array实际上是一种“视图”，可以允许JavaScript运行时访问一块名为ArrayBuffer的预分配内存。ArrayBuffer是所有定型数组及视图引用的基本单位。
注意　SharedArrayBuffer是ArrayBuffer的一个变体，可以无须复制就在执行上下文间传递它。
ArrayBuffer()是一个普通JavaScript构造函数，用于在内存中分配特定数量的字节空间。ArrayBuffer一经创建就不能调整大小，但是可以通过slice()函数复制部分或者全部内容到一个新的实例中。
const buffer = new ArrayBuffer(10)
console.log(buffer.byteLength)// 10
const buffer2 = buffer.slice(0, 5)
console.log(buffer2.byteLength)// 6
读写ArrayBuffer，必须通过视图完成。视图虽然有不同的类型，但都是引用ArrayBuffer中存储的二进制数据。
DataView
DataView专门为文件I/O和网络I/O设计，其API支持对缓冲数据高度控制，但相对其他视图性能较差，对缓冲内容没有任何预设，也不支持迭代。
语法：
new(buffer: ArrayBufferLike, byteOffset?: number, byteLength?: number): DataView;
参数说明：
• buffer：使用的ArrayBuffer对象
• byteOffset：使用ArrayBuffer时第一个字节的偏移量，默认为0
• byteLength：使用的ArrayBuffer长度，默认值使用的ArrayBuffer长度
要通过DataView读取缓冲需要以下几个组件：
• 要读或者要写的字节的偏移量，也可以看成DataView中的某种地址
• 使用ElementType来实现JavaScript的Number类型到缓冲内二进制的转换
• 内存中值得字节序。默认为大端字节序
ElementType
DataView对缓冲中的数据类型没有预设。他暴露的API强制开发者在读、写时指定ElementType。ECMAScript6支持8中不同的ElementType：
ElementType
字节
说明
等价的C类型
值的范围
Int8
1
8位有符号整数
signed char
-128~127
Uint8
1
8位无符号整数
unsigned char
0~255
Int16
2
16位有符号整数
short
-32 768~32 767
Uint16
2
16位无符号整数
unsigned short
0~65 535
Int32
4
32位有符号整数
int
-2 147 483 648~2 147 483 647
Uint32
4
32位无符号整数
unsigned int
0~4 294 967 295
Float32
4
32位IEEE-754浮点数
float
-3.4e+38~+3.4e+38
Float64
8
64位IEEE-754浮点数
double
-1.7e+308~+1.7e+308
上面的每种类型都暴露了get/set方法
• get方法接收两个参数：必选的偏移量和可选的是否以大端/小端字节序格式存储，返回对应的类型
• set方法接收三个参数：必选的偏移量、必选的值、可选的是否以大端/小端字节序格式存储
字节序
字节序指的是计算机系统维护的一种字节顺序约定。DataView支持两种字节序：
• 大单字节序：也称为网络字节序，最高有效位保存第一个字节，最低有效位保存最后一个字节
• 小端字节序：最低有效位保存第一个字节，最高有效位保存最后一个字节
边界情况
DataView完成读、写操作的前提是必须有足够的缓冲区，否则会抛出RangeError。
DataView在写入缓冲离会尽最大可能将值转换为合适的类型，后备为0。如果无法转换则抛出错误。
定型数组
定型数组与DataView一样是视图，概念上与DataView类似，但定型数组特定于某种ElementType且遵循原生的字节序。相应的，定型数组有更广的API和更高的性能。
创建定型数组的方式：
• 读取已有的缓冲
• 使用自有缓冲
• 填充可迭代结构
• 填充基于任意类型的定型数组
• <ElementType>.from()
• <ElementType>.of()
// 创建一个12字节的缓冲
const buf = new ArrayBuffer(12);
// 创建一个引用该缓冲的Int32Array
const ints = new Int32Array(buf);
// 这个定型数组知道自己的每个元素需要4字节
// 因此长度为3
alert(ints.length); // 3
// 创建一个长度为6的Int32Array
const ints2 = new Int32Array(6);
// 每个数值使用4字节，因此ArrayBuffer是24字节
alert(ints2.length);             // 6
// 类似DataView，定型数组也有一个指向关联缓冲的引用
alert(ints2.buffer.byteLength);  // 24
// 创建一个包含[2, 4, 6, 8]的Int32Array
const ints3 = new Int32Array([2, 4, 6, 8]);
alert(ints3.length);            // 4
alert(ints3.buffer.byteLength); // 16
alert(ints3[2]);                // 6
// 通过复制ints3的值创建一个Int16Array
const ints4 = new Int16Array(ints3);
// 这个新类型数组会分配自己的缓冲
// 对应索引的每个值会相应地转换为新格式
alert(ints4.length);            // 4
alert(ints4.buffer.byteLength); // 8
alert(ints4[2]);                // 6
// 基于普通数组来创建一个Int16Array
const ints5 = Int16Array.from([3, 5, 7, 9]);
alert(ints5.length);            // 4
alert(ints5.buffer.byteLength); // 8
alert(ints5[2]);                // 7
// 基于传入的参数创建一个Float32Array
const floats = Float32Array.of(3.14, 2.718, 1.618);
alert(floats.length);            // 3
alert(floats.buffer.byteLength); // 12
alert(floats[2]);                // 1.6180000305175781
定型函数的构造函数和实例都有一个BYTES_PER_ELEMENT属性，返回该类型数组中每个元素的大小。
定型数组默认初始化值为0。
定型数组行为
定型数组很多行为和数组类似，其支持的方法、属性、操作符如下：
• []
• copyWithin()
• entries()
• every()
• fill()
• filter()
• find()
• findIndex()
• forEach()
• indexOf()
• join()
• keys()
• lastIndexOf()
• length
• map()
• reduce()
• reduceRight()
• reverse()
• slice()
• some()
• sort()
• toLocaleString()
• toString()
• values()

==================================
合并、赋值和修改数组
由于缓冲区无法改变大小，而定型数组使用的是缓冲区存储数据，所以定型数组无法使用下面方法：
• concat()
• pop()
• push()
• shift()
• splice()
• unshift()
但是可以用下面两个方法：
set()：从提供的数组或者定型数组将之复制到指定索引位置
subarray()：基于原始定型数组复制一个新的定型数组
上溢和下溢
Map
ECMAScript 6以前，在JavaScript中实现“键/值”式存储可以使用Object来方便高效地完成，也就是使用对象属性作为键，再使用属性来引用值。但这种实现并非没有问题，为此TC39委员会专门为“键/值”存储定义了一个规范。
作为ECMAScript 6的新增特性，Map是一种新的集合类型，为这门语言带来了真正的键/值存储机制。Map的大多数特性都可以通过Object类型实现，但二者之间还是存在一些细微的差异。
基本API
构造函数：
Map(entries?:Array<[key:any,value:any]>|null|IterableObject):Map
set()
set用于向Map添加键值对数组，其返回值是Map对象，所以能够链式调用:
const map = new Map()
map.set('读书', 0).set('听音乐', 1)
console.log(map)// Map { '读书' => 0, '听音乐' => 1 }
同时任何JavaScript数据类型都能用来作为键使用，其值没有任何限制：
const map = new Map()
map.set(Symbol('读书'), 0).set(function () {
}, 1)
console.log(map)// Map { Symbol(读书) => 0, [Function] => 1 }
get()
用于获取某个键对应的值
delete()
删除某个键值对
has()
用于判断map中某个键是否存在对应的值
size
用于获取当前Map的长度
顺序与迭代
与Object类型的一个主要差异是，Map会自动维护键值对插入的顺序，因此能够根据插入顺序进行迭代。
可通过entries()方法获取Map的迭代器，然后通过for...of进行迭代:
const m = new Map([
  ["key1", "val1"],
  ["key2", "val2"],
  ["key3", "val3"]
]);
alert(m.entries === m[Symbol.iterator]); // true
for (let pair of m.entries()) {
  alert(pair);
}
// [key1,val1]
// [key2,val2]
// [key3,val3]
for (let pair of m[Symbol.iterator]()) {
  alert(pair);
}
// [key1,val1]
// [key2,val2]
// [key3,val3]
因为enteries()是默认迭代器，所以能够使用扩展操作符将其转换成数组：
const map = new Map()
map.set(Symbol('读书'), 0).set(function () {
}, 1)
console.log([...map.entries()])// [ [ Symbol(读书), 0 ], [ [Function], 1 ] ]
第二种迭代方法是通过forEach()方法：
const map = new Map()
map.set('读书', 0).set('听音乐', 1)
map.forEach((value, key, map) => console.log(`${key} => ${value}`))
/*
读书 => 0
听音乐 => 1
* */
而如果是需要单独的键或者值，可以使用keys()、values()这两个方法分别获取键和值的迭代器：
const map = new Map()
map.set('读书', 0).set('听音乐', 1)
console.log(map.keys())// [Map Iterator] { '读书', '听音乐' }
console.log(map.values())// [Map Iterator] { 0, 1 }
键和值在遍历期间是能够修改的，但是其内部的引用无法修改。比如对象，能够修改对象的属性值，但是不能更改对对象的引用。其根本原因是在迭代中，无论是键还是值，只是对相应键值的引用（一个指针），改变这个指针对Map并没有什么影响
const map = new Map()
const obj = { a: 1 }
map.set(obj, 1)
map.forEach((value, key) => {
  console.log(key)// { a: 1 }
  key.b = 2
  console.log(key)// { a: 1, b: 2 }
  key = null
  console.log(map)// Map { { a: 1, b: 2 } => 1 }
  console.log(map.get(obj))// 1
})
Object还是Map？
虽然Object和Map作用差不多，但是两者之间还是有性能和内存之间的差异
Map
Objec
内存占用
较大
一般
插入性能
较快
一般
查找速度
一般
较快
删除性能
最快
较差
WeakMap
ECMAScript 6新增的“弱映射”（WeakMap）是一种新的集合类型，为这门语言带来了增强的键/值对存储机制。WeakMap是Map的“兄弟”类型，其API也是Map的子集。WeakMap中的“weak”（弱），描述的是JavaScript垃圾回收程序对待“弱映射”中键的方式。
基本API
语法和Map的语法类似，不同的是其键只能是Object类型，或者继承自Object的类型：
const key1 = { id: Symbol(1) }
const key2 = { id: Symbol(2) }
const key3 = { id: Symbol(3) }
const wm = new WeakMap()
const wm2 = new WeakMap([
  [key1, 1],
  [key2, 2],
  [key3, 3]
])
get()：返回某个键对应的值
set()：添加键值对，支持链式调用
has()：判断减值对是否存在
delete()：删除键值对
弱键
弱键的意思是：这些键不是正式的调用，当所对应的对象被回收，所对应的键值对就不会存在，从而形成空隐射，最终所对应的值也会被回收。如下面的例子：
let keys = { key1: {} }
const wm = new WeakMap()
wm.set(keys.key1, {
  name: 'Nicholas'
})
// keys.key1所对应的键值对不会成为垃圾回收的目标
console.log(wm.get(keys.key1))// { name: 'Nicholas' }
// 但是如果keys.key1所对应的对象被回收，所对应的键值对也会成为垃圾回收的目标
keys.key1 = null
console.log(wm.get(keys.key1))// undefined
不可迭代键
因为键值对随时都可能被销毁，所以没有提供迭代API，同样的，获取状态的API、一次性销毁所有键值对的方法同样没有。
WeakMap实例之所以限制只能用对象作为键，是为了保证只有通过键对象的引用才能取得值。如果允许原始值，那就没办法区分初始化时使用的字符串字面量和初始化之后使用的一个相等的字符串了。
使用弱映射的场景
私有变量
弱映射使用场景之一就是实现真正的私有变量:
const User = (() => {
  const wm = new WeakMap()
  class User {
    constructor (id, name, house) {
      this.idProperty = Symbol(id)
      this.setId(id)
      this.setPrivate('name', name)
      this.setPrivate('house', house)
    }
    setPrivate (pro, val) {
      const privateInstance = wm.get(this) || {}
      privateInstance[pro] = val
      wm.set(this, privateInstance)
    }
    getPrivate (pro) {
      return wm.get(this)[pro]
    }
    setId (id) {
      this.setPrivate(this.idProperty, id)
    }
    getId () {
      return this.getPrivate(this.idProperty)
    }
  }
  return User
})()
const user = new User('123', 'nicholas', 'big house')
console.log(user.getId())// 123
console.log(user.getPrivate('name'))// nicholas
console.log(user.getPrivate('house'))// big house
DOM节点元数据
因为WeakMap不会妨碍垃圾回收，所以很适合保存关联元数据。如：某些和DOM节点相关联的数据，因为WeakMap的特性，当DOM从DOM树中被删除之后，不会使得DOM还保存在内存中，相应的，对应的键值对也会被垃圾回收机制所回收。
const wm = new WeakMap()
const loginButton = document.querySelector('#login')
// 给这个节点关联一些元数据
wm.set(loginButton, { disabled: true })
Set
Set是ES6新增的集合类型，很多方面都像是加强的Map，因为他们有很多共同的API。
基本API
构造函数语法：
Set(Array<any>|null|IterableObject):Set
• add()：增加值，返回Set，所以支持链式调用
• has()：判断是否存在
• size：获取元素数量
• delete()：删除某个元素，返回一个布尔值，表示是否存在要删除的值
• clear()：清除所有元素
顺序与迭代
Set会维护插入时值的顺序，因此支持顺序迭代。
keys()和values()
集合实例提供迭代器，以插入顺序生成集合内容。通过keys()或values()方法获取这个迭代器（其中values()是默认迭代器）：
const set = new Set(['a', 'b', 'c', 'd'])
console.log(set.values())// [Set Iterator] { 'a', 'b', 'c', 'd' }
console.log(set.keys())// [Set Iterator] { 'a', 'b', 'c', 'd' }
扩展操作
可通过数组扩展操作直接获取Set中的集合数组：
const set = new Set(['a', 'b', 'c', 'd'])
console.log([...set])// [ 'a', 'b', 'c', 'd' ]
entries()
enteries()方法返回一个迭代器，这个迭代器包含按照默认插入顺序每个值的重复两次数组：
/*
[Set Entries] {
  [ 'a', 'a' ],
  [ 'b', 'b' ],
  [ 'c', 'c' ],
  [ 'd', 'd' ]
}
*/
foreach()
set可通过foreach()方法迭代：
const set = new Set(['a', 'b', 'c', 'd'])
set.forEach(key => console.log(key))
/*
a
b
c
d
*/
定义正式集合操作
Set与Map很相似，只是API略有调整。不过需要使用的话，还需要自己手动实现一些内容，一个很好的实践思路是定义一个子类，子类中定义静态方法、同时实例中的方法使用这些静态方法。但是有些地方需要注意：
• 某些Set是有关联性的，最好让实现的方法支持任意多个集合实例。
• Set维护插入顺序，所有返回集合的方法须保证插入顺序
• 尽可能高效的使用内存。尽可能的避免数组和Set之间的转换，能够节省对象初始化成本。
• 不修改已有集合，如合并操作返回新集合
一个例子：
class XSet extends Set {
  union (...sets) {
    return XSet.union(this, ...sets)
  }
  intersection (...sets) {
    return XSet.intersection(this, ...sets)
  }
  difference (set) {
    return XSet.difference(this, set)
  }
  symmetricDifference (set) {
    return XSet.symmetricDifference(this, set)
  }
  cartesianProduct (set) {
    return XSet.cartesianProduct(this, set)
  }
  powerSet () {
    return XSet.powerSet(this)
  }
  // 返回两个或更多集合的并集
  static union (a, ...bSets) {
    const unionSet = new XSet(a)
    for (const b of bSets) {
      for (const bValue of b) {
        unionSet.add(bValue)
      }
    }
    return unionSet
  }
  // 返回两个或更多集合的交集
  static intersection (a, ...bSets) {
    const intersectionSet = new XSet(a)
    for (const aValue of intersectionSet) {
      for (const b of bSets) {
        if (!b.has(aValue)) {
          intersectionSet.delete(aValue)
        }
      }
    }
    return intersectionSet
  }
  // 返回两个集合的差集
  static difference (a, b) {
    const differenceSet = new XSet(a)
    for (const bValue of b) {
      if (a.has(bValue)) {
        differenceSet.delete(bValue)
      }
    }
    return differenceSet
  }
  // 返回两个集合的对称差集
  static symmetricDifference (a, b) {
    // 按照定义，对称差集可以表达为
    return a.union(b).difference(a.intersection(b))
  }
  // 返回两个集合（数组对形式）的笛卡儿积
  // 必须返回数组集合，因为笛卡儿积可能包含相同值的对
  static cartesianProduct (a, b) {
    const cartesianProductSet = new XSet()
    for (const aValue of a) {
      for (const bValue of b) {
        cartesianProductSet.add([aValue, bValue])
      }
    }
    return cartesianProductSet
  }
  // 返回一个集合的幂集
  static powerSet (a) {
    const powerSet = new XSet().add(new XSet())
    for (const aValue of a) {
      for (const set of new XSet(powerSet)) {
        powerSet.add(new XSet(set).add(aValue))
      }
    }
    return powerSet
  }
}
WeakSet(弱集合)
WeakSet是WeakMap的Set版本，其特性和WeakMap类似。
基本API
构造函数：
WeakSet(Array<Object|ObjectSub|null>):WeakSet
其构造函数、基础API均和Set一致
弱值
和WeakMap一样，WeakSet的值也不是真正的引用，所以不会影响垃圾回收，当引用的值被回收，这个值就从弱集合中消失。
不可迭代值
和WeakMap一样的，因为WeakSet的值随时可能被销毁，所以没有必要提供迭代的能力。同时，clear()等方法同样没有
使用弱集合的场景
WeakSet并没有WeakMap作用那么大，给对象打标签的就是使用场景之一：
const disabledElements = new WeakSet();
const loginButton = document.querySelector('#login');
// 通过加入对应集合，给这个节点打上“禁用”标签
disabledElements.add(loginButton);
迭代与扩展操作
4中原生集合类型定义了默认迭代器，均能使用for-of迭代：
• Array
• TypedArray
• Map
• Set
所以，这些类型能够使用扩展操作符，通过简单地语法能够轻松实现浅复制：
let arr1 = [{}];
let arr2 = [...arr1];
arr1[0].foo = 'bar';
console.log(arr2[0]); // { foo: 'bar' }
而这些类型的构造函数，只需要传入可迭代对象即可（同时也能够和扩展操作符一起使用）：
let arr1 = [1, 2, 3];
let arr2 = [0, ...arr1, 4, 5];
console.log(arr2); // [0, 1, 2, 3, 4, 5]